{
    "Create dialog function": {
        "prefix": "u-dialog-function",
        "body": [
            "/**",
            " * 請依照以下步驟完成 dialog function 設定：",
            " *",
            " * 1. 最上方 import 設定：import { UofxDialogController, UofxDialogOptions } from '@uofx/web-components/dialog';",
            " * 2. 在 constructor 中加入：private dialogCtrl: UofxDialogController",
            " * 3. 設定要開啟的 component",
            " * 4. 設定要帶入的參數",
            " * 5. 處理回傳參數",
            " *",
            " */",
            "",
            "this.dialogCtrl.create(<UofxDialogOptions>{",
            "  component: Component, /* TODO: 要開啟的 component */",
            "  size: 'large',",
            "  params: { data: data /* TODO: 要帶入的參數 */ }",
            "}).afterClose.subscribe({",
            "  next: res => {",
            "    /* TODO: 處理回傳參數 */",
            "  }",
            "});"
        ],
        "description": "Create dialog function"
    },
    "Create module with components": {
        "prefix": "u-module-setup",
        "body": [
            "/**",
            " * 請依照以下步驟完成 module 設定：",
            " *",
            " * 1. module name 設定：至 export class ... 貼上 OrderFieldCompleteModule",
            " * 2. 新增 props、write 等 component",
            " * 3. props component 設定：OrderFieldCompletePropsComponent",
            " * 4. design、write、view、print component 設定：OrderFieldCompleteWriteComponent",
            " *",
            " */",
            "",
            "import { NgModule } from '@angular/core';",
            "import { CommonModule } from '@angular/common';",
            "import { FormsModule, ReactiveFormsModule } from '@angular/forms';",
            "import { BASIC_HTTP_HANDLER, MyHttpHandler } from '@service/basic/basic-http-handler';",
            "import { BasicHttpClient } from '@service/basic/basic-http-client';",
            "import { UofxFormFieldBaseModule } from '@uofx/web-components/form';",
            "import { NorthWindService } from '@service/northwind.service';",
            "import { EmployeeService } from '@service/employee.service';",
            "import { UofxPluginApiService } from '@uofx/plugin/api';",
            "// modules",
            "import { UofxButtonModule } from '@uofx/web-components/button';",
            "import { UofxDialogModule } from '@uofx/web-components/dialog';",
            "import { TableModule } from 'primeng/table';",
            "import { InputNumberModule } from 'primeng/inputnumber';",
            "import { UofxFormModule } from '@uofx/web-components/form';",
            "",
            "const UOF_MODULES = [",
            "  UofxFormFieldBaseModule,",
            "  UofxButtonModule,",
            "  UofxDialogModule,",
            "  UofxFormModule",
            "];",
            "",
            "const PRIMENG_MODULES = [",
            "  TableModule,",
            "  InputNumberModule",
            "];",
            "",
            "const EMP_SERVICES = [",
            "  { provide: BASIC_HTTP_HANDLER, useClass: MyHttpHandler },",
            "  BasicHttpClient,",
            "  EmployeeService",
            "];",
            "",
            "@NgModule({",
            "  imports: [",
            "    CommonModule,",
            "    FormsModule,",
            "    ReactiveFormsModule,",
            "    ...UOF_MODULES,",
            "    ...PRIMENG_MODULES,",
            "  ],",
            "  providers: [",
            "    UofxPluginApiService,",
            "    NorthWindService,",
            "    ...EMP_SERVICES,",
            "  ],",
            "  declarations: [],",
            "  exports: []",
            "})",
            "export class /* TODO: 貼上 module name */ {",
            "  static comp = {",
            "    props: null /* TODO: 加入 props component, YourPropsComponent */,",
            "    design: null /* TODO: 加入 design component, YourDesignComponent */,",
            "    write: null /* TODO: 加入 write component, YourWriteComponent */,",
            "    view: null /* TODO: 加入 view component, YourViewComponent */,",
            "    print: null /* TODO: 加入 print component, YourPrintComponent */",
            "  }",
            "}"
        ],
        "description": "Create Angular module with components"
    },
    "Create props constructor": {
        "prefix": "u-props-constructor",
        "body": [
            "/**",
            " * 請依照以下步驟完成 props 設定：",
            " *",
            " * 1. 將整段 @Component() 貼至下方 TODO 處",
            " * 2. component name 設定：至 export class ... 貼上 OrderFieldCompletePropsComponent",
            " * 3. 至 OrderFieldCompleteModule 設定 props",
            " *",
            " */",
            "",
            "import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';",
            "import { FormBuilder, Validators } from '@angular/forms';",
            "import { BpmFwPropsComponent } from '@uofx/web-components/form';",
            "// import { YourExProps } from './path/to/your.model';",
            "",
            "// TODO: 貼上整段 @Component()",
            "",
            "export class /* TODO: 貼上 component name */ extends BpmFwPropsComponent implements OnInit {",
            "",
            "  /** 屬性資料 */",
            "  // @Input() exProps: YourExProps;",
            "",
            "  constructor(",
            "    public fb: FormBuilder,",
            "    private cdr: ChangeDetectorRef",
            "  ) {",
            "    super(fb);",
            "  }",
            "",
            "  ngOnInit(): void {",
            "",
            "    /** 設定欄位屬性 */",
            "    // this.pluginUtils.initPluginSettings({",
            "    //   toBeSubjects: [{ name: '顯示名稱', jsonPath: '對應到欄位的資料結構' }],",
            "    //   toBeConditions: [{ name: '顯示名稱', jsonPath: '對應到欄位的資料結構', type: 'Text' }],",
            "    //   toBeCalculates: [{ name: '顯示名稱', jsonPath: '對應到欄位的資料結構' }],",
            "    //   toBeNodes: [{ name: '顯示名稱', jsonPath: '對應到欄位的資料結構' }],",
            "    //   toBeExports: [{ name: '顯示名稱', jsonPath: '對應到欄位的資料結構' }],",
            "    //   searchContentJsonPath: '對應到欄位的資料結構',",
            "    // });",
            "",
            "    this.initForm();",
            "    this.initExProps();",
            "",
            "    this.cdr.detectChanges();",
            "  }",
            "",
            "  /** 初始化form */",
            "  initForm() {",
            "    // this.addFormControl('formControl', null, [Validators.required]);",
            "    this.setControlStatus();",
            "  }",
            "",
            "  /** 設定控制項狀態 */",
            "  setControlStatus() {",
            "    if (this.editable) {",
            "      this.form.enable();",
            "    }",
            "    else {",
            "      this.form.disable();",
            "    }",
            "  }",
            "",
            "  /** 初始化屬性 */",
            "  initExProps() {",
            "    if (!this.exProps) {",
            "      this.exProps = {",
            "        // formControl: 'default value',",
            "      };",
            "    }",
            "",
            "    this.form.setValue(this.exProps);",
            "  }",
            "}"
        ],
        "description": "Create props constructor"
    },
    "Create write constructor": {
        "prefix": "u-write-constructor",
        "body": [
            "/**",
            " * 請依照以下步驟完成 write 設定：",
            " *",
            " * 1. 將整段 @Component() 貼至下方 TODO 處",
            " * 2. component name 設定：至 export class ... 貼上 OrderFieldCompleteWriteComponent",
            " * 3. 至 OrderFieldCompleteModule 設定 design、write、view、print",
            " *",
            " */",
            "",
            "import { Component, Input, OnInit } from \"@angular/core\";",
            "import { BpmFwWriteComponent, UofxFormFieldLogic, UofxFormTools } from \"@uofx/web-components/form\";",
            "import { Settings } from '@uofx/core';",
            "import { FormArray, FormBuilder, FormGroup, Validators } from \"@angular/forms\";",
            "import { NorthWindService } from \"@service/northwind.service\";",
            "// import { YourExProps } from './path/to/your.model';",
            "",
            "// TODO: 貼上整段 @Component()",
            "",
            "export class /* TODO: 貼上 component name */ extends BpmFwWriteComponent implements OnInit {",
            "",
            "  /** 屬性資料 */",
            "  // @Input() exProps: YourExProps;",
            "",
            "  /** 登入者公司id */",
            "  corpId = Settings.UserInfo.corpId;",
            "  /** form group */",
            "  form: FormGroup;",
            "  /** 填寫model */",
            "  // value: YourFieldModel;",
            "  /** 錯誤訊息 */",
            "  errorMessage = [];",
            "",
            "  constructor(",
            "    private fb: FormBuilder,",
            "    private tools: UofxFormTools,",
            "    private fieldLogic: UofxFormFieldLogic,",
            "    private northWindServ: NorthWindService",
            "  ) {",
            "    super();",
            "  }",
            "",
            "  ngOnInit() {",
            "    //呼叫api之前要設定serverUrl為外掛欄位站台位址",
            "    this.northWindServ.serverUrl = this.pluginSetting?.entryHost;",
            "",
            "    this.initForm();",
            "",
            "    // 訂閱parent form的status changes，送出時，一併顯示欄位內整張form的錯誤訊息",
            "    // this.fieldLogic.parentFormBinding(this.parentForm, this.selfControl, this.form);",
            "  }",
            "",
            "  /** 初始化form */",
            "  initForm() {",
            "    this.form = this.fb.group({",
            "      // yourField: [this.value?.yourField, [Validators.required]],",
            "    });",
            "    this.setFormValue();",
            "  }",
            "",
            "  /** 填入資料 */",
            "  setFormValue() {",
            "    if (this.value) {",
            "      // this.form.controls.yourField.setValue(this.value.yourField);",
            "    }",
            "  }",
            "",
            "  /**",
            "   * 表單送出前會呼叫此函式做檢查",
            "   * @param {boolean} checkValidator 按下表單下方按鈕時是否要檢查表單驗證",
            "   * @return {*}  {Promise<boolean>}",
            "   */",
            "  checkBeforeSubmit(checkValidator: boolean): Promise<boolean> {",
            "    this.errorMessage = [];",
            "    // 驗證欄位",
            "    // this.tools.markFormGroup(this.form);",
            "    // 放在checkBeforeSubmit中，如果是暫存就不需要驗證必填，且清除form control error",
            "    // this.fieldLogic.checkValidators(checkValidator, this.selfControl, this.form);",
            "    // 真正送出欄位值變更的函式",
            "    this.valueChanges.emit(/* TODO: 要送出的值 */);",
            "",
            "    return new Promise(resolve => {",
            "      if (checkValidator) {",
            "        // 檢查是否有錯誤",
            "        // this.form.invalid ? resolve(true) : resolve(false);",
            "      } else {",
            "        resolve(true);",
            "      }",
            "    });",
            "  }",
            "}"
        ],
        "description": "Create write constructor"
    }
}